
// This file is generated by Firebase Genkit.
// Do not edit this file as changes may be overwritten.

import { NextRequest, NextResponse } from 'next/server';
import { answerPhoneCallQuestion } from '@/ai/flows/answer-phone-call-question';

/**
 * This is an example of a webhook that can be used with a telephony provider like Twilio.
 * It expects a POST request with a JSON body containing the transcribed speech.
 *
 * Twilio Request Body (example):
 * {
 *   "SpeechResult": "what is the market price of tomatoes",
 *   "Language": "en-IN" // BCP-47 language code
 * }
 */
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();

    // The transcribed text from the user's speech.
    const question = body.SpeechResult;
    // The language code from the user's speech.
    const bcp47Language = body.Language || 'en-US'; 
    const language = new Intl.DisplayNames([bcp47Language.split('-')[0]], { type: 'language' }).of(bcp47Language.split('-')[0])!;


    if (!question) {
      console.error('No SpeechResult in request body');
      // Respond with empty TwiML if there's no speech input
      return new NextResponse(
        `<?xml version="1.0" encoding="UTF-8"?>
         <Response>
            <Say>Sorry, I didn't hear anything. Please call back and try again.</Say>
         </Response>`,
        { status: 400, headers: { 'Content-Type': 'application/xml' } }
      );
    }

    // Call the Genkit flow to get the audio answer.
    const { answerAudio } = await answerPhoneCallQuestion({
      question,
      language,
      // You can add logic here to determine the voice based on the caller or other parameters.
      voice: 'Achernar', 
    });

    // The answerAudio is a data URI: "data:audio/wav;base64,..."
    // We need to extract the Base64 part.
    const base64Audio = answerAudio.split(',')[1];

    // Respond with TwiML to play the audio back to the user.
    const twiml = `<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Play>
        <Audio>data:audio/wav;base64,${base64Audio}</Audio>
    </Play>
    <Hangup/>
</Response>`;

    return new NextResponse(twiml, {
      status: 200,
      headers: { 'Content-Type': 'application/xml' },
    });
  } catch (error) {
    console.error('Error processing call:', error);
    const errorMessage = "I'm sorry, I encountered an error and can't answer your question right now. Please try again later.";

    // In case of an error, play a message to the user.
    const errorTwiml = `<?xml version="1.0" encoding="UTF-8"?>
<Response>
  <Say>${errorMessage}</Say>
  <Hangup/>
</Response>`;

    return new NextResponse(errorTwiml, {
      status: 500,
      headers: { 'Content-Type': 'application/xml' },
    });
  }
}
